name: Build and Test Linux

#------------------------------------------------
# Workflow Triggers
#------------------------------------------------
on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

#------------------------------------------------
# Environment Variables
#------------------------------------------------
env:
  MAIN_PROJECT_NAME: ${{ github.event.repository.name }}
  BUILD_TYPE: Debug
  BUILD_TARGET_TYPE: static_library
  BUILD_TEST_PROJECT: true
  THIRD_PARTY_INCLUDE_DIR: ${{ github.workspace }}/ThirdPartyDir

#------------------------------------------------
# Workflow jobs
#------------------------------------------------
jobs:
  build_and_test:
    name: Build and Test on Ubuntu Latest
    runs-on: ubuntu-latest

    steps:
      # Checkout the repository and submodules
      - name: Checkout repository (and submodules)
        uses: actions/checkout@v4
        with:
          submodules: recursive

      # Prepare third-party directory
      - name: Prepare third-party directory
        run: mkdir -p ${{ env.THIRD_PARTY_INCLUDE_DIR }}

      # Install dependencies
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential gcovr

      # Configure CMake
      - name: Configure CMake
        run: |
          cmake -B build -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} \
                -DMAIN_PROJECT_NAME=${{ env.MAIN_PROJECT_NAME }} \
                -D${{ env.MAIN_PROJECT_NAME }}_BUILD_TARGET_TYPE=${{ env.BUILD_TARGET_TYPE }} \
                -D${{ env.MAIN_PROJECT_NAME }}_BUILD_TEST_PROJECT=${{ env.BUILD_TEST_PROJECT }} \
                -DTHIRD_PARTY_INCLUDE_DIR=${{ env.THIRD_PARTY_INCLUDE_DIR }} \
                -DCMAKE_CXX_FLAGS="--coverage" -DCMAKE_C_FLAGS="--coverage"

      # Build the project
      - name: Build
        run: cmake --build build --config ${{ env.BUILD_TYPE }}

      # Run Tests
      - name: Run Tests
        run: ./build/CPP_Project_Tests/${{ env.MAIN_PROJECT_NAME }}_Tests

      # Generate coverage report
      - name: Generate coverage report
        run: |
          cd build
          gcovr --root ${{ github.workspace }} -r ${{ github.workspace }} --xml-pretty -o coverage.xml

      # Upload coverage to Codecov
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: build/coverage.xml
          flags: linux
          name: linux-coverage
          fail_ci_if_error: true
          token: ${{ secrets.CODECOV_TOKEN || '' }}
